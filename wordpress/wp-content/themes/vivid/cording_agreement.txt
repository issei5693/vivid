【コーディングルール：草案】

●レスポンシブを採用するか、ダイナミックサービングを採用するかは案件によって異なるが、
Googleが推奨していることもあるので基本的にはレスポンシブを採用する。

●設計方針はFLOCSS、命名規則はBEMを採用する。

●動的部分にはVue.jsを使用するが、WPでは純正のjQueryも使用しているため、
jQueryの1.Xとは互換性を保つこと。

●ディレクトリ構成
※sassのコンパイルはgulpを使用

======================================
style.scss

sass/
 ├ Foundation/
 │    ├ _reset.scss
 │    └ _base.scss
 │
 ├ Layout/
 │
 └ Object/
       ├ Project
       ├ Component
       ├ Utility
       └ Status

======================================
・style.scssに各インポートファイルを記述する
・reset.scssにリセット、またはノーマライズの記述をする
・base.scssに要素の基礎設定、変数、ミックスインを記述する

●レスポンシブに対する考慮
Projectでコーディングをする際、レスポンシブに対応することを考慮。
階層の少ないコンポーネントなど、クラスの切り替えてで対応できる場合はVue.jsで適応。
クラス切り替えの範囲を逸脱するものはObject単位で新たに記述。
▶bind-class
https://jp.vuejs.org/v2/guide/class-and-style.html
▶display:noneはSEO的に不利になる可能性がある
https://seopack.jp/seoblog/20160622-display-none/

●ProjectとComponentに関して
(1)設計方法
基本的にProjectでコーディングを進めていき、同記述が出現した場合、Componentにする。

(2)再利用可能であるスタイルはComponent
汎用性が高く、レスポンシブのことを考慮しても、せいぜいカラムが変わる程度のスタイルは、
Componentとして使いまわし可能なスタイルにする。

(3)ネストに関して
Project同士、Component同士はネストしてはいけない。

●命名規則の詳細
基本命名規則はMindBEMdingを用いる。
細かい命名規則は下記の通り。

(1)Projectのエレメントにモディファイアは用いてはいけない
エレメントレベルでモディファイアを適用したくなる時は別Projectにするか、ラッパー等を用いてモディファイアを前提とするProjectにする。
※コンポーネント、Utilityに関しては必要であれば、エレメントに対しモディファイアを用いても良い。

(2)マルチクラスは使用しないこと。ただし、UtilityとState、Componentの一部(icon等)のみマルチクラスを許容する。

(3)class命名はケバブケース

(4)ID命名はアンダーキャメルケース

(5)sassの変数はスネークケース
※sassの変数はハイフンを無視し、アンダーバーと同等に扱うため、注意が必要。

(6)サイズに関する命名は下記とする
2xs < xs < sm < md < lg < xl < 2xl
※fontサイズ単位にはremを使用すること。

例）
...
$font-2xl
$font-xl
$font-lg
$font-md
$font-sm
$font-xs
$font-2xs
...
...
$icon-2xl
$icon-xl
$icon-lg
$icon-md
$icon-sm
$icon-xs
$icon-2xs
...

(7)サイトに使用される色はある程度限定したほうがいいので、特別な理由がない限りはsassの変数で行う。
使用する色は下記。

$color-base //背景色などに使うカラー
$color-main //サイトのイメージカラー
$color-accent //見出しやランキングなどのアクセントに使うカラー
$color-font //ベースのフォントカラー
$color-link //テキストリンクのフォントカラー

(8)単一カラム分けの命名規則は下記の通り
Level1．primary,secondary,tertiary...
Level2. first,second,third...

これより階層が深くなる場合は設計を見直した方がいい。

ex)
l-main
	l-main__content
		l-main__content-primary
			l-main__content-primary-first
			l-main__content-primary-second
			l-main__content-primary-third
		l-main__content-secondary
		l-main__content-tertiary
	l-main_aside

(9)<article>と<section>の使い分けについて
記事をマークアップするときは基本的に<article>の方が親要素になり、<section>が子要素になる。
※逆もマークアップとしては間違いでないという情報もあるが、これを規定とする
<article>、<section>にはそれぞれ<h1>～<h6>を必ず最初の要素として出現させなければいけない。

<div>の代わりに使う場合は、<h1>～<h6>を必ず最初の要素として出現させることが出来れば使用可能。